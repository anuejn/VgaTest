// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/21/2015 00:25:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module main_vlg_check_tst (
	b,
	g,
	hc,
	hclk,
	r,
	vc,
	vclk,
	sampler_rx
);
input  b;
input  g;
input  hc;
input [10:0] hclk;
input  r;
input  vc;
input [9:0] vclk;
input sampler_rx;

reg  b_expected;
reg  g_expected;
reg  hc_expected;
reg [10:0] hclk_expected;
reg  r_expected;
reg  vc_expected;
reg [9:0] vclk_expected;

reg  b_prev;
reg  g_prev;
reg  hc_prev;
reg [10:0] hclk_prev;
reg  r_prev;
reg  vc_prev;
reg [9:0] vclk_prev;

reg  b_expected_prev;
reg  g_expected_prev;
reg  hc_expected_prev;
reg [10:0] hclk_expected_prev;
reg  r_expected_prev;
reg  vc_expected_prev;
reg [9:0] vclk_expected_prev;

reg  last_b_exp;
reg  last_g_exp;
reg  last_hc_exp;
reg [10:0] last_hclk_exp;
reg  last_r_exp;
reg  last_vc_exp;
reg [9:0] last_vclk_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	b_prev = b;
	g_prev = g;
	hc_prev = hc;
	hclk_prev = hclk;
	r_prev = r;
	vc_prev = vc;
	vclk_prev = vclk;
end

// update expected /o prevs

always @(trigger)
begin
	b_expected_prev = b_expected;
	g_expected_prev = g_expected;
	hc_expected_prev = hc_expected;
	hclk_expected_prev = hclk_expected;
	r_expected_prev = r_expected;
	vc_expected_prev = vc_expected;
	vclk_expected_prev = vclk_expected;
end



// expected b
initial
begin
	b_expected = 1'bX;
end 

// expected g
initial
begin
	g_expected = 1'bX;
end 

// expected hc
initial
begin
	hc_expected = 1'bX;
end 
// expected hclk[ 10 ]
initial
begin
	hclk_expected[10] = 1'bX;
end 
// expected hclk[ 9 ]
initial
begin
	hclk_expected[9] = 1'bX;
end 
// expected hclk[ 8 ]
initial
begin
	hclk_expected[8] = 1'bX;
end 
// expected hclk[ 7 ]
initial
begin
	hclk_expected[7] = 1'bX;
end 
// expected hclk[ 6 ]
initial
begin
	hclk_expected[6] = 1'bX;
end 
// expected hclk[ 5 ]
initial
begin
	hclk_expected[5] = 1'bX;
end 
// expected hclk[ 4 ]
initial
begin
	hclk_expected[4] = 1'bX;
end 
// expected hclk[ 3 ]
initial
begin
	hclk_expected[3] = 1'bX;
end 
// expected hclk[ 2 ]
initial
begin
	hclk_expected[2] = 1'bX;
end 
// expected hclk[ 1 ]
initial
begin
	hclk_expected[1] = 1'bX;
end 
// expected hclk[ 0 ]
initial
begin
	hclk_expected[0] = 1'bX;
end 

// expected r
initial
begin
	r_expected = 1'bX;
end 

// expected vc
initial
begin
	vc_expected = 1'bX;
end 
// expected vclk[ 9 ]
initial
begin
	vclk_expected[9] = 1'bX;
end 
// expected vclk[ 8 ]
initial
begin
	vclk_expected[8] = 1'bX;
end 
// expected vclk[ 7 ]
initial
begin
	vclk_expected[7] = 1'bX;
end 
// expected vclk[ 6 ]
initial
begin
	vclk_expected[6] = 1'bX;
end 
// expected vclk[ 5 ]
initial
begin
	vclk_expected[5] = 1'bX;
end 
// expected vclk[ 4 ]
initial
begin
	vclk_expected[4] = 1'bX;
end 
// expected vclk[ 3 ]
initial
begin
	vclk_expected[3] = 1'bX;
end 
// expected vclk[ 2 ]
initial
begin
	vclk_expected[2] = 1'bX;
end 
// expected vclk[ 1 ]
initial
begin
	vclk_expected[1] = 1'bX;
end 
// expected vclk[ 0 ]
initial
begin
	vclk_expected[0] = 1'bX;
end 
// generate trigger
always @(b_expected or b or g_expected or g or hc_expected or hc or hclk_expected or hclk or r_expected or r or vc_expected or vc or vclk_expected or vclk)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected b = %b | expected g = %b | expected hc = %b | expected hclk = %b | expected r = %b | expected vc = %b | expected vclk = %b | ",b_expected_prev,g_expected_prev,hc_expected_prev,hclk_expected_prev,r_expected_prev,vc_expected_prev,vclk_expected_prev);
	$display("| real b = %b | real g = %b | real hc = %b | real hclk = %b | real r = %b | real vc = %b | real vclk = %b | ",b_prev,g_prev,hc_prev,hclk_prev,r_prev,vc_prev,vclk_prev);
`endif
	if (
		( b_expected_prev !== 1'bx ) && ( b_prev !== b_expected_prev )
		&& ((b_expected_prev !== last_b_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_b_exp = b_expected_prev;
	end
	if (
		( g_expected_prev !== 1'bx ) && ( g_prev !== g_expected_prev )
		&& ((g_expected_prev !== last_g_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port g :: @time = %t",  $realtime);
		$display ("     Expected value = %b", g_expected_prev);
		$display ("     Real value = %b", g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_g_exp = g_expected_prev;
	end
	if (
		( hc_expected_prev !== 1'bx ) && ( hc_prev !== hc_expected_prev )
		&& ((hc_expected_prev !== last_hc_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hc_expected_prev);
		$display ("     Real value = %b", hc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hc_exp = hc_expected_prev;
	end
	if (
		( hclk_expected_prev[0] !== 1'bx ) && ( hclk_prev[0] !== hclk_expected_prev[0] )
		&& ((hclk_expected_prev[0] !== last_hclk_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hclk[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hclk_expected_prev);
		$display ("     Real value = %b", hclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hclk_exp[0] = hclk_expected_prev[0];
	end
	if (
		( hclk_expected_prev[1] !== 1'bx ) && ( hclk_prev[1] !== hclk_expected_prev[1] )
		&& ((hclk_expected_prev[1] !== last_hclk_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hclk[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hclk_expected_prev);
		$display ("     Real value = %b", hclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hclk_exp[1] = hclk_expected_prev[1];
	end
	if (
		( hclk_expected_prev[2] !== 1'bx ) && ( hclk_prev[2] !== hclk_expected_prev[2] )
		&& ((hclk_expected_prev[2] !== last_hclk_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hclk[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hclk_expected_prev);
		$display ("     Real value = %b", hclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hclk_exp[2] = hclk_expected_prev[2];
	end
	if (
		( hclk_expected_prev[3] !== 1'bx ) && ( hclk_prev[3] !== hclk_expected_prev[3] )
		&& ((hclk_expected_prev[3] !== last_hclk_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hclk[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hclk_expected_prev);
		$display ("     Real value = %b", hclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hclk_exp[3] = hclk_expected_prev[3];
	end
	if (
		( hclk_expected_prev[4] !== 1'bx ) && ( hclk_prev[4] !== hclk_expected_prev[4] )
		&& ((hclk_expected_prev[4] !== last_hclk_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hclk[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hclk_expected_prev);
		$display ("     Real value = %b", hclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hclk_exp[4] = hclk_expected_prev[4];
	end
	if (
		( hclk_expected_prev[5] !== 1'bx ) && ( hclk_prev[5] !== hclk_expected_prev[5] )
		&& ((hclk_expected_prev[5] !== last_hclk_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hclk[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hclk_expected_prev);
		$display ("     Real value = %b", hclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hclk_exp[5] = hclk_expected_prev[5];
	end
	if (
		( hclk_expected_prev[6] !== 1'bx ) && ( hclk_prev[6] !== hclk_expected_prev[6] )
		&& ((hclk_expected_prev[6] !== last_hclk_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hclk[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hclk_expected_prev);
		$display ("     Real value = %b", hclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hclk_exp[6] = hclk_expected_prev[6];
	end
	if (
		( hclk_expected_prev[7] !== 1'bx ) && ( hclk_prev[7] !== hclk_expected_prev[7] )
		&& ((hclk_expected_prev[7] !== last_hclk_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hclk[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hclk_expected_prev);
		$display ("     Real value = %b", hclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hclk_exp[7] = hclk_expected_prev[7];
	end
	if (
		( hclk_expected_prev[8] !== 1'bx ) && ( hclk_prev[8] !== hclk_expected_prev[8] )
		&& ((hclk_expected_prev[8] !== last_hclk_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hclk[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hclk_expected_prev);
		$display ("     Real value = %b", hclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hclk_exp[8] = hclk_expected_prev[8];
	end
	if (
		( hclk_expected_prev[9] !== 1'bx ) && ( hclk_prev[9] !== hclk_expected_prev[9] )
		&& ((hclk_expected_prev[9] !== last_hclk_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hclk[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hclk_expected_prev);
		$display ("     Real value = %b", hclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hclk_exp[9] = hclk_expected_prev[9];
	end
	if (
		( hclk_expected_prev[10] !== 1'bx ) && ( hclk_prev[10] !== hclk_expected_prev[10] )
		&& ((hclk_expected_prev[10] !== last_hclk_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hclk[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hclk_expected_prev);
		$display ("     Real value = %b", hclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hclk_exp[10] = hclk_expected_prev[10];
	end
	if (
		( r_expected_prev !== 1'bx ) && ( r_prev !== r_expected_prev )
		&& ((r_expected_prev !== last_r_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_expected_prev);
		$display ("     Real value = %b", r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_r_exp = r_expected_prev;
	end
	if (
		( vc_expected_prev !== 1'bx ) && ( vc_prev !== vc_expected_prev )
		&& ((vc_expected_prev !== last_vc_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vc_expected_prev);
		$display ("     Real value = %b", vc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_vc_exp = vc_expected_prev;
	end
	if (
		( vclk_expected_prev[0] !== 1'bx ) && ( vclk_prev[0] !== vclk_expected_prev[0] )
		&& ((vclk_expected_prev[0] !== last_vclk_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vclk[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vclk_expected_prev);
		$display ("     Real value = %b", vclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_vclk_exp[0] = vclk_expected_prev[0];
	end
	if (
		( vclk_expected_prev[1] !== 1'bx ) && ( vclk_prev[1] !== vclk_expected_prev[1] )
		&& ((vclk_expected_prev[1] !== last_vclk_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vclk[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vclk_expected_prev);
		$display ("     Real value = %b", vclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_vclk_exp[1] = vclk_expected_prev[1];
	end
	if (
		( vclk_expected_prev[2] !== 1'bx ) && ( vclk_prev[2] !== vclk_expected_prev[2] )
		&& ((vclk_expected_prev[2] !== last_vclk_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vclk[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vclk_expected_prev);
		$display ("     Real value = %b", vclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_vclk_exp[2] = vclk_expected_prev[2];
	end
	if (
		( vclk_expected_prev[3] !== 1'bx ) && ( vclk_prev[3] !== vclk_expected_prev[3] )
		&& ((vclk_expected_prev[3] !== last_vclk_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vclk[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vclk_expected_prev);
		$display ("     Real value = %b", vclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_vclk_exp[3] = vclk_expected_prev[3];
	end
	if (
		( vclk_expected_prev[4] !== 1'bx ) && ( vclk_prev[4] !== vclk_expected_prev[4] )
		&& ((vclk_expected_prev[4] !== last_vclk_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vclk[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vclk_expected_prev);
		$display ("     Real value = %b", vclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_vclk_exp[4] = vclk_expected_prev[4];
	end
	if (
		( vclk_expected_prev[5] !== 1'bx ) && ( vclk_prev[5] !== vclk_expected_prev[5] )
		&& ((vclk_expected_prev[5] !== last_vclk_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vclk[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vclk_expected_prev);
		$display ("     Real value = %b", vclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_vclk_exp[5] = vclk_expected_prev[5];
	end
	if (
		( vclk_expected_prev[6] !== 1'bx ) && ( vclk_prev[6] !== vclk_expected_prev[6] )
		&& ((vclk_expected_prev[6] !== last_vclk_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vclk[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vclk_expected_prev);
		$display ("     Real value = %b", vclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_vclk_exp[6] = vclk_expected_prev[6];
	end
	if (
		( vclk_expected_prev[7] !== 1'bx ) && ( vclk_prev[7] !== vclk_expected_prev[7] )
		&& ((vclk_expected_prev[7] !== last_vclk_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vclk[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vclk_expected_prev);
		$display ("     Real value = %b", vclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_vclk_exp[7] = vclk_expected_prev[7];
	end
	if (
		( vclk_expected_prev[8] !== 1'bx ) && ( vclk_prev[8] !== vclk_expected_prev[8] )
		&& ((vclk_expected_prev[8] !== last_vclk_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vclk[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vclk_expected_prev);
		$display ("     Real value = %b", vclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_vclk_exp[8] = vclk_expected_prev[8];
	end
	if (
		( vclk_expected_prev[9] !== 1'bx ) && ( vclk_prev[9] !== vclk_expected_prev[9] )
		&& ((vclk_expected_prev[9] !== last_vclk_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vclk[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vclk_expected_prev);
		$display ("     Real value = %b", vclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_vclk_exp[9] = vclk_expected_prev[9];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire b;
wire g;
wire hc;
wire [10:0] hclk;
wire r;
wire vc;
wire [9:0] vclk;

wire sampler;                             

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.b(b),
	.clk(clk),
	.g(g),
	.hc(hc),
	.hclk(hclk),
	.r(r),
	.vc(vc),
	.vclk(vclk)
);

// clk
always
begin
	clk = 1'b0;
	clk = #50 1'b1;
	#50;
end 

main_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

main_vlg_check_tst tb_out(
	.b(b),
	.g(g),
	.hc(hc),
	.hclk(hclk),
	.r(r),
	.vc(vc),
	.vclk(vclk),
	.sampler_rx(sampler)
);
endmodule

